// C program to print all primes smaller than or equal to
// n using Sieve of Eratosthenes
#include <stdio.h>
#include <math.h>
#include <stdbool.h>
#include <string.h>
#include <omp.h>

void SieveOfEratosthenes(int n)
{
    
    // Create a boolean array "prime[0..n]" and initialize
    // all entries it as true. A value in prime[i] will
    // finally be false if i is Not a prime, else true.
    bool prime[n + 1];
    memset(prime, true, sizeof(prime));

    int tid;
    int sqrn = sqrt(n);
    #pragma omp parallel for schedule(dynamic)
    for (int p = 2; p <= sqrn; p++) {
        tid = omp_get_thread_num();
        printf("Welcome to GFG from thread = %d, checking p = %d\n", tid,p);
        printf("Number of threads = %d\n", omp_get_num_threads());
        // If prime[p] is not changed, then it is a prime
        if (prime[p] == true) {

            // Update all multiples of p greater than or
            // equal to the square of it numbers which are
            // multiple of p and are less than p^2 are
            // already been marked.
            for (int i = p * p; i <= n; i += p)
                prime[i] = false;
        }
    }

   #pragma omp barrier 
    // Print all prime numbers
    int total_prime = 0;
    printf("done.\n\nFollowing are the prime numbers smaller than or equal to %d :\n", n);
    for (int p = 2; p <= n; p++){
        if (prime[p]){
            printf("%d ",p);
            total_prime++;
        }    
    }
    printf("\nTotal number of prime numbers : %d\n", total_prime);
    
}
  
// Driver Code
int main()
{
    int n;
    printf("Input integer :");
    scanf("%d",&n);
    SieveOfEratosthenes(n);
    return 0;
}